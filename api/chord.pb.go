// Code generated by protoc-gen-go. DO NOT EDIT.
// source: chord.proto

package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Void struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Void) Reset()         { *m = Void{} }
func (m *Void) String() string { return proto.CompactTextString(m) }
func (*Void) ProtoMessage()    {}
func (*Void) Descriptor() ([]byte, []int) {
	return fileDescriptor_chord_0bbd9cf7cbf2f034, []int{0}
}
func (m *Void) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Void.Unmarshal(m, b)
}
func (m *Void) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Void.Marshal(b, m, deterministic)
}
func (dst *Void) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Void.Merge(dst, src)
}
func (m *Void) XXX_Size() int {
	return xxx_messageInfo_Void.Size(m)
}
func (m *Void) XXX_DiscardUnknown() {
	xxx_messageInfo_Void.DiscardUnknown(m)
}

var xxx_messageInfo_Void proto.InternalMessageInfo

type Id struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Hash                 string   `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Id) Reset()         { *m = Id{} }
func (m *Id) String() string { return proto.CompactTextString(m) }
func (*Id) ProtoMessage()    {}
func (*Id) Descriptor() ([]byte, []int) {
	return fileDescriptor_chord_0bbd9cf7cbf2f034, []int{1}
}
func (m *Id) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Id.Unmarshal(m, b)
}
func (m *Id) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Id.Marshal(b, m, deterministic)
}
func (dst *Id) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Id.Merge(dst, src)
}
func (m *Id) XXX_Size() int {
	return xxx_messageInfo_Id.Size(m)
}
func (m *Id) XXX_DiscardUnknown() {
	xxx_messageInfo_Id.DiscardUnknown(m)
}

var xxx_messageInfo_Id proto.InternalMessageInfo

func (m *Id) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Id) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

type NodeId struct {
	Val                  []byte   `protobuf:"bytes,1,opt,name=val,proto3" json:"val,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NodeId) Reset()         { *m = NodeId{} }
func (m *NodeId) String() string { return proto.CompactTextString(m) }
func (*NodeId) ProtoMessage()    {}
func (*NodeId) Descriptor() ([]byte, []int) {
	return fileDescriptor_chord_0bbd9cf7cbf2f034, []int{2}
}
func (m *NodeId) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodeId.Unmarshal(m, b)
}
func (m *NodeId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodeId.Marshal(b, m, deterministic)
}
func (dst *NodeId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeId.Merge(dst, src)
}
func (m *NodeId) XXX_Size() int {
	return xxx_messageInfo_NodeId.Size(m)
}
func (m *NodeId) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeId.DiscardUnknown(m)
}

var xxx_messageInfo_NodeId proto.InternalMessageInfo

func (m *NodeId) GetVal() []byte {
	if m != nil {
		return m.Val
	}
	return nil
}

type ContactInfo struct {
	Address              string   `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Id                   *NodeId  `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Payload              []byte   `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ContactInfo) Reset()         { *m = ContactInfo{} }
func (m *ContactInfo) String() string { return proto.CompactTextString(m) }
func (*ContactInfo) ProtoMessage()    {}
func (*ContactInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_chord_0bbd9cf7cbf2f034, []int{3}
}
func (m *ContactInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ContactInfo.Unmarshal(m, b)
}
func (m *ContactInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ContactInfo.Marshal(b, m, deterministic)
}
func (dst *ContactInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContactInfo.Merge(dst, src)
}
func (m *ContactInfo) XXX_Size() int {
	return xxx_messageInfo_ContactInfo.Size(m)
}
func (m *ContactInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ContactInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ContactInfo proto.InternalMessageInfo

func (m *ContactInfo) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *ContactInfo) GetId() *NodeId {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *ContactInfo) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func init() {
	proto.RegisterType((*Void)(nil), "Void")
	proto.RegisterType((*Id)(nil), "Id")
	proto.RegisterType((*NodeId)(nil), "NodeId")
	proto.RegisterType((*ContactInfo)(nil), "ContactInfo")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ChordClient is the client API for Chord service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ChordClient interface {
	Ping(ctx context.Context, in *Void, opts ...grpc.CallOption) (*ContactInfo, error)
	FindSuccessor(ctx context.Context, in *Id, opts ...grpc.CallOption) (*ContactInfo, error)
	ClosestPrecedingNode(ctx context.Context, in *Id, opts ...grpc.CallOption) (*ContactInfo, error)
	Predecessor(ctx context.Context, in *Void, opts ...grpc.CallOption) (*ContactInfo, error)
	Successor(ctx context.Context, in *Void, opts ...grpc.CallOption) (*ContactInfo, error)
	Notify(ctx context.Context, in *ContactInfo, opts ...grpc.CallOption) (*Void, error)
}

type chordClient struct {
	cc *grpc.ClientConn
}

func NewChordClient(cc *grpc.ClientConn) ChordClient {
	return &chordClient{cc}
}

func (c *chordClient) Ping(ctx context.Context, in *Void, opts ...grpc.CallOption) (*ContactInfo, error) {
	out := new(ContactInfo)
	err := c.cc.Invoke(ctx, "/Chord/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chordClient) FindSuccessor(ctx context.Context, in *Id, opts ...grpc.CallOption) (*ContactInfo, error) {
	out := new(ContactInfo)
	err := c.cc.Invoke(ctx, "/Chord/FindSuccessor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chordClient) ClosestPrecedingNode(ctx context.Context, in *Id, opts ...grpc.CallOption) (*ContactInfo, error) {
	out := new(ContactInfo)
	err := c.cc.Invoke(ctx, "/Chord/ClosestPrecedingNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chordClient) Predecessor(ctx context.Context, in *Void, opts ...grpc.CallOption) (*ContactInfo, error) {
	out := new(ContactInfo)
	err := c.cc.Invoke(ctx, "/Chord/Predecessor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chordClient) Successor(ctx context.Context, in *Void, opts ...grpc.CallOption) (*ContactInfo, error) {
	out := new(ContactInfo)
	err := c.cc.Invoke(ctx, "/Chord/Successor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chordClient) Notify(ctx context.Context, in *ContactInfo, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/Chord/Notify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChordServer is the server API for Chord service.
type ChordServer interface {
	Ping(context.Context, *Void) (*ContactInfo, error)
	FindSuccessor(context.Context, *Id) (*ContactInfo, error)
	ClosestPrecedingNode(context.Context, *Id) (*ContactInfo, error)
	Predecessor(context.Context, *Void) (*ContactInfo, error)
	Successor(context.Context, *Void) (*ContactInfo, error)
	Notify(context.Context, *ContactInfo) (*Void, error)
}

func RegisterChordServer(s *grpc.Server, srv ChordServer) {
	s.RegisterService(&_Chord_serviceDesc, srv)
}

func _Chord_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChordServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Chord/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChordServer).Ping(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chord_FindSuccessor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChordServer).FindSuccessor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Chord/FindSuccessor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChordServer).FindSuccessor(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chord_ClosestPrecedingNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChordServer).ClosestPrecedingNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Chord/ClosestPrecedingNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChordServer).ClosestPrecedingNode(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chord_Predecessor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChordServer).Predecessor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Chord/Predecessor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChordServer).Predecessor(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chord_Successor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChordServer).Successor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Chord/Successor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChordServer).Successor(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chord_Notify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContactInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChordServer).Notify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Chord/Notify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChordServer).Notify(ctx, req.(*ContactInfo))
	}
	return interceptor(ctx, in, info, handler)
}

var _Chord_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Chord",
	HandlerType: (*ChordServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Chord_Ping_Handler,
		},
		{
			MethodName: "FindSuccessor",
			Handler:    _Chord_FindSuccessor_Handler,
		},
		{
			MethodName: "ClosestPrecedingNode",
			Handler:    _Chord_ClosestPrecedingNode_Handler,
		},
		{
			MethodName: "Predecessor",
			Handler:    _Chord_Predecessor_Handler,
		},
		{
			MethodName: "Successor",
			Handler:    _Chord_Successor_Handler,
		},
		{
			MethodName: "Notify",
			Handler:    _Chord_Notify_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chord.proto",
}

func init() { proto.RegisterFile("chord.proto", fileDescriptor_chord_0bbd9cf7cbf2f034) }

var fileDescriptor_chord_0bbd9cf7cbf2f034 = []byte{
	// 273 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0xdf, 0x4a, 0xc3, 0x30,
	0x14, 0xc6, 0xd7, 0xff, 0xec, 0x74, 0x8a, 0x1c, 0x04, 0x4b, 0x41, 0x94, 0xb0, 0x8b, 0x81, 0xd0,
	0x8b, 0xf9, 0x06, 0x16, 0x84, 0xde, 0x48, 0x99, 0xe0, 0xc5, 0xee, 0x62, 0x4f, 0xb6, 0x06, 0x4a,
	0x53, 0x92, 0x2a, 0xec, 0x7d, 0x7d, 0x10, 0x49, 0xb6, 0xa1, 0xe2, 0x76, 0x77, 0x4e, 0xf2, 0xf1,
	0xfb, 0x7d, 0x24, 0x90, 0x36, 0xad, 0xd2, 0x54, 0x0c, 0x5a, 0x8d, 0x8a, 0xc5, 0x10, 0xbe, 0x29,
	0x49, 0x6c, 0x01, 0x7e, 0x45, 0x78, 0x09, 0xbe, 0xa4, 0xcc, 0xbb, 0xf7, 0x16, 0xd3, 0x95, 0x2f,
	0x09, 0x11, 0xc2, 0x96, 0x9b, 0x36, 0xf3, 0xdd, 0x89, 0x9b, 0x59, 0x0e, 0xf1, 0x8b, 0x22, 0x51,
	0x11, 0x5e, 0x41, 0xf0, 0xc9, 0x3b, 0x17, 0x9f, 0xad, 0xec, 0xc8, 0xd6, 0x90, 0x96, 0xaa, 0x1f,
	0x79, 0x33, 0x56, 0xfd, 0x46, 0x61, 0x06, 0x09, 0x27, 0xd2, 0xc2, 0x98, 0x03, 0xf3, 0xb8, 0xe2,
	0x8d, 0x13, 0x59, 0x6c, 0xba, 0x4c, 0x8a, 0x3d, 0xcf, 0x19, 0x33, 0x48, 0x06, 0xbe, 0xeb, 0x14,
	0xa7, 0x2c, 0x70, 0xdc, 0xe3, 0xba, 0xfc, 0xf2, 0x20, 0x2a, 0x6d, 0x73, 0xbc, 0x85, 0xb0, 0x96,
	0xfd, 0x16, 0xa3, 0xc2, 0x56, 0xcf, 0x67, 0xc5, 0x2f, 0x27, 0x9b, 0xe0, 0x1c, 0x2e, 0x9e, 0x65,
	0x4f, 0xaf, 0x1f, 0x4d, 0x23, 0x8c, 0x51, 0x1a, 0x83, 0xa2, 0xfa, 0x9f, 0x7a, 0x80, 0xeb, 0xb2,
	0x53, 0x46, 0x98, 0xb1, 0xd6, 0xa2, 0x11, 0x24, 0xfb, 0xad, 0xad, 0x71, 0x3a, 0x3c, 0x87, 0xb4,
	0xd6, 0x82, 0xc4, 0x01, 0x78, 0x46, 0xcc, 0x60, 0xfa, 0x23, 0x3d, 0x93, 0xb9, 0xb3, 0xaf, 0x37,
	0xca, 0xcd, 0x0e, 0xff, 0xdc, 0xe4, 0xfb, 0x38, 0x9b, 0x3c, 0x45, 0xeb, 0x80, 0x0f, 0xf2, 0x3d,
	0x76, 0xdf, 0xf3, 0xf8, 0x1d, 0x00, 0x00, 0xff, 0xff, 0x73, 0x52, 0xcf, 0x89, 0xad, 0x01, 0x00,
	0x00,
}
